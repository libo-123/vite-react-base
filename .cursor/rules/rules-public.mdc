---
description: 
globs: 
alwaysApply: true
---
---
description: React通用开发规范
globs: 
alwaysApply: true
---
  
- **用简洁且逻辑语意清晰的中文回答「每次提出的问题」**
  
## 你的角色

开发人员：资深前端全栈开发工程师

## 通用开发规范

### 1. 命名规范

- **文件/目录命名**: 使用小写字母，单词间用连字符(-)分隔
- **组件文件命名**: 使用PascalCase(首字母大写)，如`UserProfile.tsx`
- **函数命名**: 使用camelCase(小驼峰)，如`getUserData`
- **变量命名**: 使用camelCase，如`userData`
- **常量命名**: 使用全大写，单词间用下划线(_)分隔，如`API_BASE_URL`
- **类型/接口命名**: 使用PascalCase，接口名以 `I` 开头（如 `IUserProps`, `IApiResponse`），类型名以 `T` 开头（如 `TUserData`, `TApiConfig`）
- **枚举**: 枚举类型使用 PascalCase 并以 `Enum` 结尾（如 `StatusEnum`, `RoleEnum`），且每一项必须有Jsdoc中文注释
- **样式类名**: 使用kebab-case(小写字母，单词间用连字符分隔)，如`user-profile`

### 2. TypeScript 规范
如果项目使用TypeScript，则用此开发规则：
- 非必要不使用 `any` 类型，必须明确定义类型。
- 优先使用接口（Interface）而非类型别名（Type Alias）。
- 组件 Props 必须定义明确的接口。
- 善用 TypeScript 的高级类型（Partial、Required、Pick、Omit等）
- 使用泛型提高代码复用性
- 避免使用`!`非空断言，优先使用可选链操作符`?.`和空值合并运算符`??`

### 3. 组件开发规范

- **设计原则**
  - 根据React版本，优先使用函数组件和相应版本的Hooks。
  - 组件应该符合单一职责原则，一个组件只做一件事。
  - 遵循React代码设计规范，合理封装抽离函数或组件。
  - 使用TypeScript定义组件明确的props类型，避免使用 any 类型。
  - 确保语义化 HTML 结构。
  - 公共组件必须包含 JSDoc 注释(中文)，说明组件功能和 Props 定义。
  - 遵守项目中使用配置的 ESLint 规则。
  - 不要使用eval()函数。

- **代码拆分**
  - 基于路由的拆分：使用React.lazy和Suspense，以便仅在访问特定路由时才加载组件。这非常常见，并且可以提高初始加载速度。
  - 基于组件的拆分：大型组件应拆分为小型组件，提高复用性和可维护性。
  - 基于组件类型拆分：将用户界面渲染（展示型）与状态管理和逻辑（容器型）分开。

- **避免事项（即常见错误规则）**
  - 直接操作 DOM：避免直接操作 DOM；让 React 来处理更新。
  - 过度设计：为简单问题使用简单解决方案，避免不必要的抽象
  - 属性传递过深（Prop Drilling）：将属性传递到多个层级的组件中，而这些组件并不使用这些属性。
  - 过度使用状态：派生数据应通过计算获得，而非存储在状态中
  - useEffect 中依赖项缺失：没有在 useEffect Hook 的依赖项数组中包含所有依赖项。
  - 滥用useEffect：不要在useEffect中处理可以在事件处理函数中完成的逻辑
  - 在列表中忽略键：在渲染列表时，忘记提供唯一且稳定的 key 属性。

- **优化技术**
  - 合理使用React的memo、useCallback和useMemo进行性能优化
  - 防抖 / 节流：限制函数执行的速率（例如，在输入字段中），推荐用lodash-es库。
  - 最小化状态更新：避免触发不必要重新渲染的状态更新。
  - 键（Keys）：循环渲染时确保在每次渲染时，键都是唯一且一致的。

- **内存管理**
  - 避免内存泄漏：正确合理的清理副作用（返回清理函数），避免内存泄露。
  - 释放未使用的对象：当不再需要大型对象时，避免在内存中保留它们。
  - 垃圾回收：了解 JavaScript 的垃圾回收机制，避免创建不必要的对象。

- **安全防范**
  - 跨站脚本攻击（XSS）：对用户输入进行净化处理，防止恶意代码注入，避免使用innerHTML等可能导致XSS攻击的API。
  - 不要指定资源所带的具体协议 ( http:,https: ) ，除非这两者协议都不可用。

- **错误处理**
  - API或调用请求函数时使用 try-catch 防止异常错误。

### 4. 样式规范
- BEM（块、元素、修饰符）：使用 BEM 或类似的方法来实现清晰且可维护的类名命名。
- 为 样式 添加注释：添加注释来解释复杂或不太直观的 CSS 规则，使用一致的注释风格。
- 保持 样式 代码 DRY（不要重复自己）：尽可能使用变量、混入和继承来复用 CSS 代码，但要避免嵌套超过三层，避免过度使用计算属性。
- 避免使用耗费性能的属性：尽可能避免使用计算量较大的 CSS 属性（例如，filter、大模糊半径的 box-shadow）。
- 避免使用！important：尽量减少 !important 的使用，以防止特异性冲突。
- 避免使用内联样式：为了更好的可维护性和关注点分离，优先使用外部样式表或嵌入式样式，而不是内联样式。
- 清理用户输入：当使用基于用户输入的 CSS 变量时，清理输入内容，以防止 CSS 注入攻击。
- 将多组件频繁使用的样式拆分到公共样式文件中。

## 5. 其他


